.data
	numero: .word 0
	aproximacao: .word 0
	
	stringEntradaInvalida:	.asciiz "Entradas invalidas."
	
	stringErroInteracoes1:  .asciiz "Nao foi possivel calcular sqrt("
	stringErroInteracoes2:  .asciiz ")."
	
	stringSaida1:           .asciiz "A raiz quadrada de "
	stringSaida2:           .asciiz " eh "
	stringSaida3:  		.asciiz ", calculada em "
	stringSaida4:   	.asciiz " iteracoes."
	
	space:                  .asciiz "\n"
	
	stringFeito:		.asciiz "Saiu.\n"
	string100:		.asciiz "string100.\n"
	string400:		.asciiz "string400.\n"
	string900:		.asciiz "string900.\n"
	string1600:		.asciiz "string1600.\n"
	string2500:		.asciiz "string2500.\n"
.text

main:

	#Leitura das Entradas:
	
	#Leitura Numero
 	li $v0, 5
 	sw $v0, numero
 	syscall
 	move $s0, $v0

 	#Leitura Aproximacao
 	li $v0, 5
 	sw $v0, aproximacao
 	syscall
 	move $s1, $v0
 	
 	j validacaoEntradas
 	
 	
validacaoEntradas:
	 	
	#Verificacao da Validacao das Entradas:
 	li $t0, 1
 	slt $t1, $t0, $s0
 	beq $t2, $t1, imprimirErroEntradaInvalida 
 	
 	li $t0, 0
 	slt $t1, $t0, $s1
 	beq $t2, $t1, imprimirErroEntradaInvalida
 	
 	li $t0, 17
 	slt $t1, $s1, $t0
 	beq $t2, $t1, imprimirErroEntradaInvalida
 	
 	j encontrarInteirosA0eB0
 
 	
 		
encontrarInteirosA0eB0:

	li $t0, 101
	slt $t1, $s0, $t0
	bne $t2, $t1, numeroAte100
		li $t0, 401
		slt $t1, $s0, $t0
		bne $t2, $t1, numeroAte400
			li $t0, 901
			slt $t1, $s0, $t0
			bne $t2, $t1, numeroAte900
				li $t0, 1601
				slt $t1, $s0, $t0
				bne $t2, $t1, numeroAte1600
					li $t0, 2501
					slt $t1, $s0, $t0
					bne $t2, $t1, numeroAte2500
						li $v0, 10 #saida
 						syscall
			
	numeroAte100:
	
	li $v0, 4
 	la $a0, string100
 	syscall
 	
 	li $t0, 1
 	
		for100:
			li $t3, 0 #contador i
			
			beq $t3, 11, exit #vai para outra funcao
			
			addi $t4,$t3,1 # (i+1)
			mul $t5,$t4,$t4 # (i+1)*(i+1)
			slt $t6, $s0, $t5 #(i+1)*(i+1)) > numero
			beq $t6, 1, exit # saio do if - if(((i+1)*(i+1)) > numero)
			
			li $v0, 4
 			la $a0, string400
		 	syscall
 	
			addi $s2, $t3,1  #$s2 = inteiroB0 = i+1
			
			li $v0, 1
 			move $a0, $s2
		 	syscall
			
			mul $t5, $t3,$t3 # $t5 = i*i
			
			bne $s0, $t5, else100 #saio do if (i*i == numero)
			subi $s3, $t3,1 #$s3 = inteiroA0 = i-1
			
			add $t3, $t3, 1
 				
			j for100
		else100:
			add $s3, $t3,$zero
			add $t3, $t3, 1
			j for100
 		
	numeroAte400:
		
		for400:
			li $t3, 10 #contador i
			
			beq $t3, 20, exit #vai para outra funcao
			addi $t4,$t3,1 # (i+1)
			mul $t5,$t4,$t4 # (i+1)*(i+1)
			slt $t6, $s0, $t5 #(i+1)*(i+1)) > numero
			beq $t6, $zero, exit # saio do if - if(((i+1)*(i+1)) > numero)
			
			addi $s2, $t3,1  #$s2 = inteiroB0 = i+1
			
			mul $t5, $t3,$t3 # $t5 = i*i
			bne $s0, $t5, else400 #saio do if (i*i == numero)
			subi $s3, $t3,1 #$s3 = inteiroA0 = i-1
			
			j for400
		else400:
			add $s3, $t3,$zero
			j for400
	
	numeroAte900:
	
		for900:
			li $t3, 20 #contador i
			
			beq $t3, 30, exit #vai para outra funcao
			addi $t4,$t3,1 # (i+1)
			mul $t5,$t4,$t4 # (i+1)*(i+1)
			slt $t6, $s0, $t5 #(i+1)*(i+1)) > numero
			beq $t6, $zero, exit # saio do if - if(((i+1)*(i+1)) > numero)
			
			addi $s2, $t3,1  #$s2 = inteiroB0 = i+1
			
			mul $t5, $t3,$t3 # $t5 = i*i
			bne $s0, $t5, else900 #saio do if (i*i == numero)
			subi $s3, $t3,1 #$s3 = inteiroA0 = i-1
			
			j for900
		else900:
			add $s3, $t3,$zero
			j for900
 		
 	numeroAte1600:
	
		for1600:
			li $t3, 30 #contador i
			
			beq $t3, 40, exit #vai para outra funcao
			addi $t4,$t3,1 # (i+1)
			mul $t5,$t4,$t4 # (i+1)*(i+1)
			slt $t6, $s0, $t5 #(i+1)*(i+1)) > numero
			beq $t6, $zero, exit # saio do if - if(((i+1)*(i+1)) > numero)
			
			addi $s2, $t3,1  #$s2 = inteiroB0 = i+1
			
			mul $t5, $t3,$t3 # $t5 = i*i
			bne $s0, $t5, else1600 #saio do if (i*i == numero)
			subi $s3, $t3,1 #$s3 = inteiroA0 = i-1
			
			j for1600
		else1600:
			add $s3, $t3,$zero
			j for1600
 		
 	numeroAte2500:
	
		for2500:
			li $t3, 40 #contador i
			
			beq $t3, 50, exit #vai para outra funcao
			addi $t4,$t3,1 # (i+1)
			mul $t5,$t4,$t4 # (i+1)*(i+1)
			slt $t6, $s0, $t5 #(i+1)*(i+1)) > numero
			beq $t6, $zero, exit # saio do if - if(((i+1)*(i+1)) > numero)
			
			addi $s2, $t3,1  #$s2 = inteiroB0 = i+1
			
			mul $t5, $t3,$t3 # $t5 = i*i
			bne $s0, $t5, else2500 #saio do if (i*i == numero)
			subi $s3, $t3,1 #$s3 = inteiroA0 = i-1
			
			j for2500
		else2500:
			add $s3, $t3,$zero
			j for2500

imprimirErroEntradaInvalida:

	#impressao string invalida
 	li $v0, 4
 	la $a0, stringEntradaInvalida
 	syscall
 	
 	#impressao space
 	li $v0, 4
 	la $a0, space
 	syscall
 	
 	li $v0, 10 #saida
 	syscall
 	
imprimirErroNaoFoiPossivel:
	#impressao string nao foi possivel
 	li $v0, 4
 	la $a0, stringErroInteracoes1
 	syscall
 	
 	#impressao primeiro numero da entrada
 	li $v0, 1
 	move $a0, $s0
 	syscall
 	
 	#impressao restante string nao foi possivel
 	li $v0, 4
 	la $a0, stringErroInteracoes2
 	syscall
 	
 	#impressao space
 	li $v0, 4
 	la $a0, space
 	syscall
 	
 	li $v0, 10 #saida
 	syscall
 	
impressaoSaidaRaiz:
	#impressao string calculada raiz quadrada
 	li $v0, 4
 	la $a0, stringSaida1
 	syscall
 	
 	#impressao primeiro numero da entrada
 	li $v0, 1
 	move $a0, $s0
 	syscall
 	
 	#impressao restante string calculada raiz quadrada
 	li $v0, 4
 	la $a0, stringSaida2
 	syscall
 	
 	# impressao valor da raiz quadrada calculada
 	
 	#impressao restante string calculada raiz quadrada
 	li $v0, 4
 	la $a0, stringSaida3
 	syscall
 	
 	#impressao quantidade de iteracoes
 	
 	#impressao restante string calculada raiz quadrada
 	li $v0, 4
 	la $a0, stringSaida4
 	syscall
 	
 	#impressao space
 	li $v0, 4
 	la $a0, space
 	syscall
 	
 	li $v0, 10 #saida
 	syscall


exit:

	#impressao space
 	li $v0, 4
 	la $a0, stringFeito
 	syscall
 	
 	li $v0, 1
 	move $a0, $s2
 	syscall
 	
 	li $v0, 1
 	move $a0, $s3
 	syscall
 	
 	li $v0, 10 #saida
 	syscall