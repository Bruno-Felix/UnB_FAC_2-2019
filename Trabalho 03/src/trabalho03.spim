.data
	numero: .word 0
	aproximacao: .word 0
	num1: .double 0.0 #inicializando inteiroA
	num2: .double 0.0 #inicializando inteiroB
	num3: .double 0.0 #inicializando auxPrecisao
	num4: .double 2.0 #para divisao por 2
	num5: .double -1.0 
	num6: .double 0.0 #inicializando raiz
	
	stringEntradaInvalida:	.asciiz "Entradas invalidas."
	
	stringErroInteracoes1:  .asciiz "Nao foi possivel calcular sqrt("
	stringErroInteracoes2:  .asciiz ")."
	
	stringSaida1:           .asciiz "A raiz quadrada de "
	stringSaida2:           .asciiz " eh "
	stringSaida3:  		.asciiz ", calculada em "
	stringSaida4:   	.asciiz " iteracoes."
	
	space:                  .asciiz "\n"
	
	stringFeito:		.asciiz "Saiu.\n"
	string100:		.asciiz "string100.\n"
	string400:		.asciiz "string400.\n"
	string900:		.asciiz "string900.\n"
	string1600:		.asciiz "string1600.\n"
	string2500:		.asciiz "string2500.\n"
.text

main:

	#Leitura das Entradas:
	
	#Leitura Numero
 	li $v0, 5
 	sw $v0, numero
 	syscall
 	move $s0, $v0

 	#Leitura Aproximacao
 	li $v0, 5
 	sw $v0, aproximacao
 	syscall
 	move $s1, $v0
 	
 	j validacaoEntradas
 	
 	
validacaoEntradas:
	 	
	#Verificacao da Validacao das Entradas:
 	li $t0, 1
 	slt $t1, $t0, $s0
 	beq $t2, $t1, imprimirErroEntradaInvalida 
 	
 	li $t0, 0
 	slt $t1, $t0, $s1
 	beq $t2, $t1, imprimirErroEntradaInvalida
 	
 	li $t0, 17
 	slt $t1, $s1, $t0
 	beq $t2, $t1, imprimirErroEntradaInvalida
 	
 	j encontrarInteirosA0eB0
 	
 	 	
encontrarInteirosA0eB0:

	li $t0, 101
	slt $t1, $s0, $t0
	bne $t2, $t1, numeroAte100
		li $t0, 401
		slt $t1, $s0, $t0
		bne $t2, $t1, numeroAte400
			li $t0, 901
			slt $t1, $s0, $t0
			bne $t2, $t1, numeroAte900
				li $t0, 1601
				slt $t1, $s0, $t0
				bne $t2, $t1, numeroAte1600
					li $t0, 2501
					slt $t1, $s0, $t0
					bne $t2, $t1, numeroAte2500
			
	numeroAte100:
		for100:
			li $t3, 0 #contador i
			
			beq $t3, 10, calcularRaiz #vai para outra funcao
			addi $t4,$t3,1 # (i+1)
			mul $t5,$t4,$t4 # (i+1)*(i+1)
			slt $t6, $s0, $t5 #(i+1)*(i+1)) > numero
			beq $t6, $zero, calcularRaiz # saio do if - if(((i+1)*(i+1)) > numero)
			
			addi $s2, $t3,1  #$s2 = inteiroB0 = i+1
			
			mul $t5, $t3,$t3 # $t5 = i*i
			bne $s0, $t5, else100 #saio do if (i*i == numero)
			subi $s3, $t3,1 #$s3 = inteiroA0 = i-1
			
			addi $t3,$t3,1
			j for100
		else100:
			add $s3, $t3,$zero
			addi $t3,$t3,1
			j for100
 		
	numeroAte400:
		
		for400:
			li $t3, 10 #contador i
			
			beq $t3, 20, calcularRaiz #vai para outra funcao
			addi $t4,$t3,1 # (i+1)
			mul $t5,$t4,$t4 # (i+1)*(i+1)
			slt $t6, $s0, $t5 #(i+1)*(i+1)) > numero
			beq $t6, $zero, calcularRaiz # saio do if - if(((i+1)*(i+1)) > numero)
			
			addi $s2, $t3,1  #$s2 = inteiroB0 = i+1
			
			mul $t5, $t3,$t3 # $t5 = i*i
			bne $s0, $t5, else400 #saio do if (i*i == numero)
			subi $s3, $t3,1 #$s3 = inteiroA0 = i-1
			
			addi $t3,$t3,1
			j for400
		else400:
			add $s3, $t3,$zero
			addi $t3,$t3,1
			j for400
	
	numeroAte900:
	
		for900:
			li $t3, 20 #contador i
			
			beq $t3, 30, calcularRaiz #vai para outra funcao
			addi $t4,$t3,1 # (i+1)
			mul $t5,$t4,$t4 # (i+1)*(i+1)
			slt $t6, $s0, $t5 #(i+1)*(i+1)) > numero
			beq $t6, $zero, calcularRaiz # saio do if - if(((i+1)*(i+1)) > numero)
			
			addi $s2, $t3,1  #$s2 = inteiroB0 = i+1
			
			mul $t5, $t3,$t3 # $t5 = i*i
			bne $s0, $t5, else900 #saio do if (i*i == numero)
			subi $s3, $t3,1 #$s3 = inteiroA0 = i-1
			
			addi $t3,$t3,1
			j for900
		else900:
			add $s3, $t3,$zero
			addi $t3,$t3,1
			j for900
 		
 	numeroAte1600:
	
		for1600:
			li $t3, 30 #contador i
			
			beq $t3, 40, calcularRaiz #vai para outra funcao
			addi $t4,$t3,1 # (i+1)
			mul $t5,$t4,$t4 # (i+1)*(i+1)
			slt $t6, $s0, $t5 #(i+1)*(i+1)) > numero
			beq $t6, $zero, calcularRaiz # saio do if - if(((i+1)*(i+1)) > numero)
			
			addi $s2, $t3,1  #$s2 = inteiroB0 = i+1
			
			mul $t5, $t3,$t3 # $t5 = i*i
			bne $s0, $t5, else1600 #saio do if (i*i == numero)
			subi $s3, $t3,1 #$s3 = inteiroA0 = i-1
			
			addi $t3,$t3,1
			j for1600
		else1600:
			add $s3, $t3,$zero
			addi $t3,$t3,1
			j for1600
 		
 	numeroAte2500:
	
		for2500:
			li $t3, 40 #contador i
			
			beq $t3, 50, calcularRaiz #vai para outra funcao
			addi $t4,$t3,1 # (i+1)
			mul $t5,$t4,$t4 # (i+1)*(i+1)
			slt $t6, $s0, $t5 #(i+1)*(i+1)) > numero
			beq $t6, $zero, calcularRaiz # saio do if - if(((i+1)*(i+1)) > numero)
			
			addi $s2, $t3,1  #$s2 = inteiroB0 = i+1
			
			mul $t5, $t3,$t3 # $t5 = i*i
			bne $s0, $t5, else2500 #saio do if (i*i == numero)
			subi $s3, $t3,1 #$s3 = inteiroA0 = i-1
			
			addi $t3,$t3,1
			j for2500
		else2500:
			add $s3, $t3,$zero
			addi $t3,$t3,1
			j for2500
	
calcularRaiz:
	
	lwc1 $f0, num1 #inicializando inteiroA
	lwc1 $f2, num2 #inicializando inteiroB
	lwc1 $f4, num3 #inicializando auxPrecisao
	lwc1 $f6, num4 #para divisao por 2
	lwc1 $f14, num5 #para multiplicacao por -1
	lwc1 $f16, num6 #inicializando raiz
	mtc1 $s3,$f8  #$s3 = inteiroA0
	mtc1 $s0, $f10 #$s0 = numero
	mfc1 $t4, $f12
	mfc1 $t5, $f4 

	#double auxPrecisao = pow(10, -(precisao));
	#mul.d $f4, 
	
	add $t0,$t0,$zero #inicializando iteracoes (inteiro)
	while:
		beq $t0,$zero, saida
		bne $t0,1,elseIteracoes
		add.d $f0,$f0,$f8  #inteiroA = inteiroA0;
		div.d $f2,$f2,$f0 #inteiroB = numero / inteiroA
		
		j while
	
	elseIteracoes:
		add.d $f0,$f0,$f2 #inteiroA = (inteiroA + inteiroB);
		div.d $f0, $f0, $f6 #inteiroA = (inteiroA + inteiroB) / 2;
	
		div.d $f2, $f10,$f0 #inteiroB = (numero / inteiroA)
		
		sub.d $f12, $f2, $f0 #diferencaEntreAeB = inteiroB - inteiroA
		
		slt $t1, $t4, $zero #diferencaEntreAeB < 0
		beq $t1,$zero, continue #confere condicao no outro if
		mul.d $f12,$f12,$f14 #diferencaEntreAeB *= -1
		
		j continue
		
		j while
	continue:
		slt $t2, $t4, $t5
		beq $t2, $zero, elseContinue
		add.d $f16,$f16,$f2
		
		j impressaoSaidaRaiz
	
	 elseContinue:
	 	addi $t0, $t0, 1
	 	slti $t3, $t0, 100
	 	bne $t1,$zero, imprimirErroNaoFoiPossivel 
	 	
imprimirErroEntradaInvalida:

	#impressao string invalida
 	li $v0, 4
 	la $a0, stringEntradaInvalida
 	syscall
 	
 	#impressao space
 	li $v0, 4
 	la $a0, space
 	syscall
 	
 	li $v0, 10 #saida
 	syscall
 	
imprimirErroNaoFoiPossivel:
	#impressao string nao foi possivel
 	li $v0, 4
 	la $a0, stringErroInteracoes1
 	syscall
 	
 	#impressao primeiro numero da entrada
 	li $v0, 1
 	move $a0, $s0
 	syscall
 	
 	#impressao restante string nao foi possivel
 	li $v0, 4
 	la $a0, stringErroInteracoes2
 	syscall
 	
 	#impressao space
 	li $v0, 4
 	la $a0, space
 	syscall
 	
 	li $v0, 10 #saida
 	syscall
 	
impressaoSaidaRaiz:
	#impressao string calculada raiz quadrada
 	li $v0, 4
 	la $a0, stringSaida1
 	syscall
 	
 	#impressao primeiro numero da entrada
 	li $v0, 1
 	move $a0, $s0
 	syscall
 	
 	#impressao restante string calculada raiz quadrada
 	li $v0, 4
 	la $a0, stringSaida2
 	syscall
 	
 	# impressao valor da raiz quadrada calculada
 	
 	#impressao restante string calculada raiz quadrada
 	li $v0, 4
 	la $a0, stringSaida3
 	syscall
 	
 	#impressao quantidade de iteracoes
 	
 	#impressao restante string calculada raiz quadrada
 	li $v0, 4
 	la $a0, stringSaida4
 	syscall
 	
 	#impressao space
 	li $v0, 4
 	la $a0, space
 	syscall
 	
 	li $v0, 10 #saida
 	syscall
 
 saida:
 	li $v0, 10 #saida
 	syscall
