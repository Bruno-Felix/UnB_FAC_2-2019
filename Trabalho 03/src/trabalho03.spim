.data
	numero: .word 0
	aproximacao: .word 0
	const5 : .float 5.0
	const9 : .float 9.0
	num1: .double 3.0 #inicializando inteiroA
	num2: .double 5.0 #inicializando inteiroB
	numAuxPrecisao: .word 10 #inicializando auxPrecisao
	num4: .word 2 #para divisao por 2
	num5: .word -1 
	num6: .word 0 #inicializando raiz
	num10: .word 10
	num100: .word 100
	
	stringEntradaInvalida:	.asciiz "Entradas invalidas."
	
	stringErroInteracoes1:  .asciiz "Nao foi possivel calcular sqrt("
	stringErroInteracoes2:  .asciiz ")."
	
	stringSaida1:           .asciiz "A raiz quadrada de "
	stringSaida2:           .asciiz " eh "
	stringSaida3:  		.asciiz ", calculada em "
	stringSaida4:   	.asciiz " iteracoes."
	
	space:                  .asciiz "\n"
	
	stringFeito:		.asciiz "Saiu.\n"
	string100:		.asciiz "string100.\n"
	string400:		.asciiz "string400.\n"
	string900:		.asciiz "string900.\n"
	string1600:		.asciiz "string1600.\n"
	string2500:		.asciiz "string2500.\n"
.text

main:

	#Leitura das Entradas:
	
	#Leitura Numero
 	li $v0, 5
 	sw $v0, numero
 	syscall
 	move $s0, $v0

 	#Leitura Aproximacao
 	li $v0, 5
 	sw $v0, aproximacao
 	syscall
 	move $s2, $v0
 	
 	j validacaoEntradas
 	
 	
validacaoEntradas:
	 	
	#Verificacao da Validacao das Entradas:
 	li $t0, 1
 	slt $t1, $t0, $s0
 	beq $t2, $t1, imprimirErroEntradaInvalida 
 	
 	li $t0, 0
 	slt $t1, $t0, $s2
 	beq $t2, $t1, imprimirErroEntradaInvalida
 	
 	li $t0, 17
 	slt $t1, $s2, $t0
 	beq $t2, $t1, imprimirErroEntradaInvalida
 	
 	
 	j encontrarInteirosA0eB0
 	
 	 	
encontrarInteirosA0eB0:

	li $t0, 101
	slt $t1, $s0, $t0
	bne $t2, $t1, numeroAte100
		li $t0, 401
		slt $t1, $s0, $t0
		bne $t2, $t1, numeroAte400
			li $t0, 901
			slt $t1, $s0, $t0
			bne $t2, $t1, numeroAte900
				li $t0, 1601
				slt $t1, $s0, $t0
				bne $t2, $t1, numeroAte1600
					li $t0, 2501
					slt $t1, $s0, $t0
					bne $t2, $t1, numeroAte2500
			
	numeroAte100:
		
		li $t3, 0 #contador i
		for100:				
			addi $t4,$t3,1 # (i+1)
			mul $t5,$t4,$t4 # (i+1)*(i+1)

 			slt $t6, $s0, $t5
			beq $t6, 1, if100 # saio do if - if(((i+1)*(i+1)) > numero)
				addi $t3, $t3, 1
				j for100
				
				if100:
 					addi $s6, $t3, 1
 					
 					mul $t5,$t3,$t3 # i*i
 					beq $s0, $t5, auxif100
 						addi $s4, $t3, 0

 						j calcularRaiz
 				
 					auxif100:
 						addi $s4, $t3, -1
 
						j calcularRaiz
					

	numeroAte400:
		
		li $t3, 0 #contador i
		for400:				
			addi $t4,$t3,1 # (i+1)
			mul $t5,$t4,$t4 # (i+1)*(i+1)

 			slt $t6, $s0, $t5
			beq $t6, 1, if400 # saio do if - if(((i+1)*(i+1)) > numero)
				addi $t3, $t3, 1
				j for400
				
				if400:
 					addi $s6, $t3, 1
 					
 					mul $t5,$t3,$t3 # i*i
 					beq $s0, $t5, auxif400
 						addi $s4, $t3, 0
 
 						j calcularRaiz
 				
 					auxif400:
 						addi $s4, $t3, -1
 	
						j calcularRaiz
	
	numeroAte900:
	
		li $t3, 0 #contador i
		for900:				
			addi $t4,$t3,1 # (i+1)
			mul $t5,$t4,$t4 # (i+1)*(i+1)

 			slt $t6, $s0, $t5
			beq $t6, 1, if900 # saio do if - if(((i+1)*(i+1)) > numero)
				addi $t3, $t3, 1
				j for900
				
				if900:
 					addi $s6, $t3, 1
 					
 					mul $t5,$t3,$t3 # i*i
 					beq $s0, $t5, auxif900
 						addi $s4, $t3, 0

 						j calcularRaiz
 				
 					auxif900:
 						addi $s4, $t3, -1

						j calcularRaiz
 		
 	numeroAte1600:
	
		li $t3, 0 #contador i
		for1600:				
			addi $t4,$t3,1 # (i+1)
			mul $t5,$t4,$t4 # (i+1)*(i+1)

 			slt $t6, $s0, $t5
			beq $t6, 1, if1600 # saio do if - if(((i+1)*(i+1)) > numero)
				addi $t3, $t3, 1
				j for1600
				
				if1600:
 					addi $s6, $t3, 1
 					
 					mul $t5,$t3,$t3 # i*i
 					beq $s0, $t5, auxif1600
 						addi $s4, $t3, 0
 						
 						j calcularRaiz
 				
 					auxif1600:
 						addi $s4, $t3, -1
						
						j calcularRaiz
 		
 	numeroAte2500:
	
		li $t3, 0 #contador i
		for2500:				
			addi $t4,$t3,1 # (i+1)
			mul $t5,$t4,$t4 # (i+1)*(i+1)

 			slt $t6, $s0, $t5
			beq $t6, 1, if2500 # saio do if - if(((i+1)*(i+1)) > numero)
				addi $t3, $t3, 1
				j for2500
				
				if2500:
 					addi $s6, $t3, 1
 					
 					mul $t5,$t3,$t3 # i*i
 					beq $s0, $t5, auxif2500
 						addi $s4, $t3, 0
 						
 						j calcularRaiz
 				
 					auxif2500:
 						addi $s4, $t3, -1
 		
						j calcularRaiz
	
calcularRaiz:
	
	
	#li $v0, 1
 	#move $a0, $s4
 	#syscall
 	
 	#li $v0, 1
 	#move $a0, $s6
 	#syscall
	

	mtc1.d $s0, $f0
	cvt.d.w $f0, $f0
	#li $v0, 3
 	#mov.d $f12, $f0
 	#syscall

	mtc1.d $s4, $f2		#A0
	cvt.d.w $f2, $f2
	#li $v0, 3
 	#mov.d $f12, $f2
 	#syscall
 	
	mtc1.d $s6, $f4		#B0
	cvt.d.w $f4, $f4
	#li $v0, 3
 	#mov.d $f12, $f4
 	#syscall
	
	
	lwc1 $f6, numAuxPrecisao #inicializando auxPrecisao
	cvt.d.w $f6, $f6
	lwc1 $f8, num5 #para multiplicacao por -1
	cvt.d.w $f8, $f8
	lwc1 $f10, num6 #inicializando raiz
	cvt.d.w $f10, $f10
	lwc1 $f14, num10
	cvt.d.w $f14, $f14
	lwc1 $f16, num4
	cvt.d.w $f16, $f16
	lwc1 $f18, num6 #comparacao diferenca < 0
	cvt.d.w $f18, $f18
	lwc1 $f28, num100 #comparacao diferenca < 0
	cvt.d.w $f28, $f28

 	
	#double auxPrecisao = pow(10, -(precisao));
	li $t3, 0 #contador i
	
	li $t0, 1 #interacoes
	
	li $t1, 100
	
	addi $t4, $s2, 1
	forAuxPrecisao:
	
		beq $t3, $t4, while
		
		div.d $f6, $f6, $f14
		addi $t3, $t3, 1
		
		j forAuxPrecisao
	

	while: 	
		beq $t0, $zero, saida
		
		bne $t0, 1, elseIteracoes
			
			div.d $f4, $f0, $f2 #inteiroB = numero / inteiroA
			addi $t0, $t0, 1
			j while
			
		elseIteracoes:
			add.d $f2, $f2, $f4 #inteiroA = (inteiroA + inteiroB);
			div.d $f2, $f2, $f16 #inteiroA = (inteiroA + inteiroB) / 2;
	
			div.d $f4, $f0, $f2 #inteiroB = (numero / inteiroA)
				
			sub.d $f20, $f4, $f2 #diferencaEntreAeB = inteiroB - inteiroA
			
			c.lt.d  $f20, $f18 #diferencaEntreAeB < 0
			bc1t transformarPositivo
			
			j continue
			
			transformarPositivo:
				mul.d $f20, $f20, $f8
				
				j continue
				
			continue:
				c.le.d $f20, $f6
				bc1t  impressaoSaidaRaiz
				
				addi $t0, $t0, 1
				slt $t2, $t0, $t1
				beq $t2, 0, imprimirErroNaoFoiPossivel
				j while
				
				
imprimirErroEntradaInvalida:

	#impressao string invalida
 	li $v0, 4
 	la $a0, stringEntradaInvalida
 	syscall
 	
 	#impressao space
 	li $v0, 4
 	la $a0, space
 	syscall
 	
 	li $v0, 10 #saida
 	syscall
 	
imprimirErroNaoFoiPossivel:
	#impressao string nao foi possivel
 	li $v0, 4
 	la $a0, stringErroInteracoes1
 	syscall
 	
 	#impressao primeiro numero da entrada
 	li $v0, 1
 	move $a0, $s0
 	syscall
 	
 	#impressao restante string nao foi possivel
 	li $v0, 4
 	la $a0, stringErroInteracoes2
 	syscall
 	
 	#impressao space
 	li $v0, 4
 	la $a0, space
 	syscall
 	
 	li $v0, 10 #saida
 	syscall
 	
impressaoSaidaRaiz:
	#impressao string calculada raiz quadrada
 	li $v0, 4
 	la $a0, stringSaida1
 	syscall
 	
 	#impressao primeiro numero da entrada
 	li $v0, 1
 	move $a0, $s0
 	syscall
 	
 	#impressao restante string calculada raiz quadrada
 	li $v0, 4
 	la $a0, stringSaida2
 	syscall
 	
 	# impressao valor da raiz quadrada calculada
 	li $v0, 3
 	mov.d $f12, $f4
 	syscall
 	
 	#impressao restante string calculada raiz quadrada
 	li $v0, 4
 	la $a0, stringSaida3
 	syscall
 	
 	#impressao quantidade de iteracoes
 	li $v0, 1
 	move $a0, $t0
 	syscall
 	
 	#impressao restante string calculada raiz quadrada
 	li $v0, 4
 	la $a0, stringSaida4
 	syscall
 	
 	#impressao space
 	li $v0, 4
 	la $a0, space
 	syscall
 	
 	li $v0, 10 #saida
 	syscall
 
 saida:
 	
 	li $v0, 10 #saida
 	syscall
